# -*- coding: utf-8 -*-
"""EJERCICIO_1_5_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iSCxHfRG2yEp8FuG7gET5xo6WHW9G9jQ
"""

import numpy as np
import matplotlib.pyplot as plt

# Nuevos puntos dados (posición en metros, deformación en mm)
x_points = np.array([0.5, 1.0, 1.5, 2.0])
y_points = np.array([1.2, 2.3, 3.7, 5.2])

# Función de interpolación de Lagrange
def lagrange_interpolation(x, x_points, y_points):
    n = len(x_points)
    result = 0
    for i in range(n):
        term = y_points[i]
        for j in range(n):
            if i != j:
                term *= (x - x_points[j]) / (x_points[i] - x_points[j])
        result += term
    return result

# a) Calcular la deformación en x = 1.25
x_eval = 1.25
y_eval = lagrange_interpolation(x_eval, x_points, y_points)
print(f"Deformación esperada en x = {x_eval} m: {y_eval:.4f} mm")

# b) Graficar la interpolación en el rango [0.5, 2.0]
x_values = np.linspace(0.5, 2.0, 200)
y_values = [lagrange_interpolation(x, x_points, y_points) for x in x_values]

# Gráfica
plt.figure(figsize=(6, 4))
plt.plot(x_values, y_values, label="Interpolación de Lagrange", color="blue")
plt.scatter(x_points, y_points, color="red", label="Puntos dados")
plt.scatter(x_eval, y_eval, color="green", label=f"Interpolado en x={x_eval}")
plt.xlabel("Posición (m)")
plt.ylabel("Deformación (mm)")
plt.title("Interpolación de Lagrange - Deformación en una Viga")
plt.legend()
plt.grid(True)
plt.savefig("interpolacion_viga.png")
plt.show()